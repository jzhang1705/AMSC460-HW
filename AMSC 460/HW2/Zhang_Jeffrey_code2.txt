import numpy as np
import sys
import math
from scipy.linalg import hilbert

def HilbertMatrix(n):
    Hn = np.zeros(shape=(n,n))
    for i in range(n):
        for j in range(n):
            Hn[i][j] = 1/(i + j + 1)
    return Hn

def GaussianElimination(Hn, bn, n):
    xstar = np.zeros(n)
    # Applying Gauss Elimination
    for i in range(n):
        if Hn[i][i] == 0.0:
            sys.exit('Divide by zero detected!')
        
        for j in range(i+1, n):
            ratio = Hn[j][i]/Hn[i][i]
        
            for k in range(n):
                Hn[j][k] = Hn[j][k] - ratio * Hn[i][k]
    # Back Substitution
    xstar[n-1] = Hn[n-2][n-1]/Hn[n-2][n-2]

    for i in range(n-2,-1,-1):
        xstar[i] = Hn[i][n-1]
    
        for j in range(i+1,n):
            xstar[i] = xstar[i] - Hn[i][j]*xstar[j]
    
        xstar[i] = xstar[i]/Hn[i][i]

    return xstar

def norm1(vector):
    norm = 0
    for i in range(len(vector)):
        norm += abs(vector[i])
    return norm

def norm2(vector):
    norm = 0
    for i in range(len(vector)):
        norm += abs(vector[i])**2
    return math.sqrt(norm)

def normInfinity(vector):
    norm = 0
    for i in range(len(vector)):
        if abs(vector[i]) > norm:
            norm = vector[i]
    return norm